#!/bin/bash

# either creates a new class with the standard class format in C++, or opens up an existing
# .hpp and .cpp file together.

function CreateFiles () {
	FILENAME=${1,,}
	H=$FILENAME.hpp
	CPP=$FILENAME.cpp

	# create files:
	touch $H
	touch $CPP

	# create header:
	echo "#pragma once" >> $H
	echo "" >> $H
	echo "" >> $HP
	echo "class $1" >> $H
	echo "{" >> $H
	echo "" >> $H
	echo "public:" >> $H
	echo "" >> $H
	echo -e "\t$1();" >> $H
	echo -e "\t~$1();" >> $H
	echo "" >> $H
	echo "private:" >> $H
	echo "" >> $H
	echo "" >> $H
	echo "" >> $H
	echo "};" >> $H

	# create source:
	echo "#include \"$H\"" >> $CPP
	echo "" >> $CPP
	echo "" >> $CPP
	echo "$1::$1()" >> $CPP
	echo "{" >> $CPP
	echo "" >> $CPP
	echo "}" >> $CPP
	echo "$1::~$1()" >> $CPP
	echo "{" >> $CPP
	echo "" >> $CPP
	echo "}" >> $CPP
}


# first, check to make sure that only one argument is supplied.
if (($# > 1)); then
	echo "Too many arguments! Exiting... "
	exit
fi

# next, make sure that we didn't accidentally try to create a file name with a file extension.
#declare TEMP=`$1 | grep [.]`
if [[ "$1" =~ [.] ]]; then
	echo "Improper file name! Exiting... "
	exit
fi

# finally, check to see if the files already exist. if so, just open them up to edit.
# otherwise, create new files and set up the standard class template.
if [ -f ${1,,}.hpp ] && [ -f ${1,,}.cpp ]; then
	vim -O ${1,,}.hpp ${1,,}.cpp
else
	CreateFiles $1
	vim -O ${1,,}.hpp ${1,,}.cpp
fi












